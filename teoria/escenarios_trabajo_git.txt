1.0 Escenario:

    Si se desea quitarle el add a un archivo en especifico se realiza el siguiente comando.

        -git rm --cached nombre_archivo

            ( Esto provocará que el archivo se elimine del espacio en memoria ram del Git, localmente hablando esto traducido lo que realiza
              es simplemente eliminar el add que se le realizo a dicho archivo, se puede visualizar en si le das nuevamente git status
              este aparecerá de color rojo, demostrandonos que no esta añadido con add )

2.0 Escenario:

    Si se desea visualizar diferencias de un archivo que aún no está añadido con add para ver que se agrego.

    -git diff nombre_archivo

    Si se desea ver las diferencias entre un commit y otro commit del archivo se usa el siguiente comando.

        -Visualizar los commits que tiene el proyecto.

            -git log
        
        -Se debe obtener el ID del commit, el cual esta al lado de la palabra commit APARECERA_ESCRITO_EL_ID

        -Visualizar diferencias:

            -git diff ID_COMMIT_PRIMERO_A_COMPARAR ID_SEGUNO_COMMIT_PARA_COMPARAR_VS_PRIMERO

                Ej:
                    ( En este ejemplo se mostrarán las diferencias entre estos dos commits. )

                    -git diff a7be75cf32b55e8261a1e96b798ca481928c8761 9d2db828cd800fa41fa8ad27d211ea2482e09bba


3.0 Escenario:

    Volver en el tiempo de forma agresiva.

    1 Forma:

        -git reset

            -Nos permite volver a una version ( Commit ) anterior

            Existen dos reset, el duro y el suave.

            -git reset --hard ( Esto provocará que todo vuelva a la versión "Commit" que se elija, este caso es cuando se quiera volver a la versión anterior si
                                o si)

            -git reset --soft ( Esto provocará que volvamos a la versión anterior pero lo que este con git add seguirá ahí )
    
    2 Forma:

            Visualizar como era un determinado archivo en cierto commit 

            -git checkout ID_COMMIT nombre_archivo

4.0 Escenario:

    Eiminar los archivos del Staging ( osea los archivos que se les hizo el add pero no tiene commit aún si no solo add )

        - git reset HEAD

            * De esta manera si le damos git status, ya no se verán verdes pues ya salieron del add, si no que se verán rojos como si no se les hubiera
              hecho add *

5.0 Escenario:

    Visualizar cambios en los commit de manera especificos en los archivos.

        -git log --stat
        
        Visualizar como era un determinado archivo en cierto commit 

            -git checkout ID_COMMIT nombre_archivo

                Ej:
                    -git diff a7be75cf32b55e8261a1e96b798ca481928c8761 archivo_ejemplo.txt

                    ( Esto devolverá al tiempo del archivo donde esta ubicado ese commit)

                    * Si quieres volver a su estado original debes dar *

                    -git checkout master nombre_archivo

6.0 Escenario:

    Guardar el log en un archivo txt

        -git log > log.txt ( Esto creará un archivo txt con el log de git)

7.0 Escenario:

    Mezclar ramas.

        Se elige la rama principal a la cual se le añadirá el último commit de la otra rama que se fusionará

        -git merge nombre_rama

        Nota: si los dos desarrolladores modificaron la misma líne esto podría generar conflictos, si no es el caso git hará auto-mergening y fusionará
              las ramas

8.0 Escenario:

    conflictos:

        No tengas miedo. Si aparece conflictos al hacer merge, revisa los archivos que presentan conflicto y decide si aceptar los cambios que vienen
        o aceptar tus cambios del HEADA ( Rama donde estás parado ).

        Nota: Arreglar / Solucionar conflictos es algo normal, se basa en una comunicación de equipo para decidir que cambios se deben hacer para Solucionar
              el conflicto, así entenderás que trato de hacer el otro desarrollador en esas líneas de código.

9.0 Escenario:

    Bugs:

        Como buena práctica se debería crear una nueva rama, normalmente la nomenclatura de este tipo de soluciones se entiende como hotfix

            (se crea la rama)
                
                -git branch hotfix-bugTypo (ejemplo nombre)
                
                -git checkout hotfix-bugTypo

                // se corrige el bug, se agrega y se comitea en el repositorio local. Esto en la rama del hotfix

                ( Se sube al origin repositorio remoto )

                -git push origin hotfix-bugTypo

                Desde github se utiliza las opciones de Pull request. En este caso se hace entr la rama hotfix-bugTypo y master.
                Nota: Desde las opciones gráficas de github en este caso, permite asignar quien puede revisarlo eligiendolo con Reviewers.

                    - Los Reviewers pueden declinar el pull request pidiendo cambios etc. Esto es una buena práctica para que todo este de manera
                      óptima.

10.0 Escenario:

    Reconstruir un commit ( añadir algo que se te olvido al commit que hiciste )

        -Haces los cambios despues del commit que acabas de hacer, los guardas ( añades con git add )

        Después los incluidos ( añadidos ) los cambios faltantes puedes añadirlo al commit anterior con el comando:

            -git commit --amend